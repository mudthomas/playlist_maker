# name: Package Application with Pyinstaller

on:
  push:
    branches: [ main ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [ main ]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# on:
#   push:
#     # Sequence of patterns matched against refs/tags
#     tags:
#     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Package Application
        uses: JackMcKew/pyinstaller-action-windows@main
        with:
          path: src

      - uses: actions/upload-artifact@v4
        with:
          name: playlist_generator
          path: src/dist/windows
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths my-artifact README.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: src/dist/windows
          asset_name: playlist_generator.exe
          asset_content_type: application/exe
